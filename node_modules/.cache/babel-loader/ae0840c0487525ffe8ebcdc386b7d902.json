{"ast":null,"code":"import _slicedToArray from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/src/components/CopyItem/CopyItem.tsx\";\n\nimport React, { useState, useContext } from 'react';\nimport { MultiLangContext } from '../../context/MultiLang/MultiLang';\nimport { classModifier, copyToClipboard } from '../../utils';\nimport './CopyItem.scss';\n\nvar CopyItem = function CopyItem(props) {\n  var name = props.name,\n      value = props.value;\n\n  var _useContext = useContext(MultiLangContext),\n      words = _useContext.words;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShown = _useState2[0],\n      setIsShown = _useState2[1];\n\n  var onCopy = function onCopy() {\n    copyToClipboard(value);\n    setIsShown(true);\n    setTimeout(function () {\n      setIsShown(false);\n    }, 3000);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classModifier('copy__icon', [isShown && 'done']),\n    onClick: function onClick() {\n      return onCopy();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classModifier('copy-tooltip', [isShown && 'done']),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text copy-tooltip__text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, !isShown ? /*#__PURE__*/React.createElement(React.Fragment, null, words.copy, \" \", name, \" \", words.toClipboard) : /*#__PURE__*/React.createElement(React.Fragment, null, words.copied))));\n};\n\nexport default CopyItem;","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/components/CopyItem/CopyItem.tsx"],"names":["React","useState","useContext","MultiLangContext","classModifier","copyToClipboard","CopyItem","props","name","value","words","isShown","setIsShown","onCopy","setTimeout","copy","toClipboard","copied"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,aAA/C;AAIA,OAAO,iBAAP;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAA2B;AAAA,MAClCC,IADkC,GAClBD,KADkB,CAClCC,IADkC;AAAA,MAC5BC,KAD4B,GAClBF,KADkB,CAC5BE,KAD4B;;AAAA,oBAGxBP,UAAU,CAACC,gBAAD,CAHc;AAAA,MAGlCO,KAHkC,eAGlCA,KAHkC;;AAAA,kBAIZT,QAAQ,CAAC,KAAD,CAJI;AAAA;AAAA,MAInCU,OAJmC;AAAA,MAI1BC,UAJ0B;;AAM1C,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBR,IAAAA,eAAe,CAACI,KAAD,CAAf;AAEAG,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAE,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GARD;;AAUA,sBACE,uDACE;AACE,IAAA,SAAS,EAAER,aAAa,CAAC,YAAD,EAAe,CAACO,OAAO,IAAI,MAAZ,CAAf,CAD1B;AAEE,IAAA,OAAO,EAAE;AAAA,aAAME,MAAM,EAAZ;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME;AAAK,IAAA,SAAS,EAAET,aAAa,CAAC,cAAD,EAAiB,CAACO,OAAO,IAAI,MAAZ,CAAjB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACA,OAAD,gBACC,0CACGD,KAAK,CAACK,IADT,OACgBP,IADhB,OACuBE,KAAK,CAACM,WAD7B,CADD,gBAKC,0CAAGN,KAAK,CAACO,MAAT,CAPJ,CADF,CANF,CADF;AAqBD,CArCD;;AAuCA,eAAeX,QAAf","sourcesContent":["import React, { useState, useContext } from 'react';\n\nimport { MultiLangContext } from '../../context/MultiLang/MultiLang';\nimport { classModifier, copyToClipboard } from '../../utils';\n\nimport { ICopyItemProps } from './CopyItem.types';\n\nimport './CopyItem.scss';\n\nconst CopyItem = (props: ICopyItemProps) => {\n  const { name, value } = props;\n\n  const { words } = useContext(MultiLangContext);\n  const [isShown, setIsShown] = useState(false);\n\n  const onCopy = () => {\n    copyToClipboard(value);\n\n    setIsShown(true);\n\n    setTimeout(() => {\n      setIsShown(false);\n    }, 3000);\n  };\n\n  return (\n    <>\n      <div\n        className={classModifier('copy__icon', [isShown && 'done'])}\n        onClick={() => onCopy()}\n      />\n\n      <div className={classModifier('copy-tooltip', [isShown && 'done'])}>\n        <p className='text copy-tooltip__text'>\n          {/*<span className='text--700'></span>*/}\n          {!isShown ? (\n            <>\n              {words.copy} {name} {words.toClipboard}\n            </>\n          ) : (\n            <>{words.copied}</>\n          )}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default CopyItem;\n"]},"metadata":{},"sourceType":"module"}