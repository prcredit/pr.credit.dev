{"ast":null,"code":"import _slicedToArray from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/src/scenes/TxPage/TxPage.tsx\";\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { NavLink, useHistory, useRouteMatch } from \"react-router-dom\";\nimport API from '../../api/api';\nimport { MultiLangContext } from \"../../context/MultiLang/MultiLang\";\nimport { ROUTES } from \"../../config/constants\";\nimport Spinner from '../../components/Spinner';\nimport './TxPage.scss';\n\nvar TxPage = function TxPage() {\n  var history = useHistory();\n\n  var _useContext = useContext(MultiLangContext),\n      words = _useContext.words,\n      selectedLang = _useContext.selectedLang;\n\n  var match = useRouteMatch('/tx/:id');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1]; // const [txState, setTxState] = useState<{\n  //   block: number;\n  //   from: string;\n  //   hash: string;\n  //   pending: boolean;\n  //   rejected: boolean;\n  //   timestamp: number;\n  //   status: string;\n  //   outputs: any;\n  // }>({\n  //   block: 0,\n  //   from: '',\n  //   hash:  '',\n  //   pending: false,\n  //   rejected: false,\n  //   timestamp: 0,\n  //   status: '',\n  //   outputs: Array<ITransaction>\n  // });\n\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      txState = _React$useState2[0],\n      setTxState = _React$useState2[1];\n\n  useEffect(function () {\n    setLoading(false);\n    API.getTransaction(match === null || match === void 0 ? void 0 : match.params.id).then(function (res) {\n      console.log(res.data);\n      setTxState(res.data);\n      setLoading(true);\n    }).catch(function (err) {\n      console.log(err);\n      history.push('/not-found');\n    }); // eslint-disable-next-line\n  }, [match === null || match === void 0 ? void 0 : match.params.id]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section details\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, !loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, words.txDetails), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"details__block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(NavLink, {\n    className: \"button button--home\",\n    to: ROUTES.main,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 19\n    }\n  }, words.backToMain))))));\n};\n\nexport default TxPage;","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/scenes/TxPage/TxPage.tsx"],"names":["React","useContext","useEffect","useState","NavLink","useHistory","useRouteMatch","API","MultiLangContext","ROUTES","Spinner","TxPage","history","words","selectedLang","match","loading","setLoading","txState","setTxState","getTransaction","params","id","then","res","console","log","data","catch","err","push","txDetails","main","backToMain"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,aAA9B,QAAmD,kBAAnD;AAIA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,MAAT,QAAuB,wBAAvB;AAIA,OAAOC,OAAP,MAAoB,0BAApB;AAGA,OAAO,eAAP;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,MAAMC,OAAO,GAAGP,UAAU,EAA1B;;AADmB,oBAEWJ,UAAU,CAACO,gBAAD,CAFrB;AAAA,MAEZK,KAFY,eAEZA,KAFY;AAAA,MAELC,YAFK,eAELA,YAFK;;AAInB,MAAMC,KAAK,GAAGT,aAAa,CAAe,SAAf,CAA3B;;AAJmB,kBAKWH,QAAQ,CAAC,KAAD,CALnB;AAAA;AAAA,MAKZa,OALY;AAAA,MAKHC,UALG,kBAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAxBmB,wBA0BWjB,KAAK,CAACG,QAAN,EA1BX;AAAA;AAAA,MA0BZe,OA1BY;AAAA,MA0BHC,UA1BG;;AA6BnBjB,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEAV,IAAAA,GAAG,CAACa,cAAJ,CAAmBL,KAAnB,aAAmBA,KAAnB,uBAAmBA,KAAK,CAAEM,MAAP,CAAcC,EAAjC,EACGC,IADH,CACQ,UAAAC,GAAG,EAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AAEAR,MAAAA,UAAU,CAACK,GAAG,CAACG,IAAL,CAAV;AACAV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KANH,EAOGW,KAPH,CAOS,UAAAC,GAAG,EAAI;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AAEAjB,MAAAA,OAAO,CAACkB,IAAR,CAAa,YAAb;AACD,KAXH,EAHc,CAed;AACD,GAhBQ,EAgBN,CAACf,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEM,MAAP,CAAcC,EAAf,CAhBM,CAAT;AAmBA,sBACE,uDACE;AAAS,IAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACN,OAAD,gBAEG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,gBAKG,uDACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBH,KAAK,CAACkB,SAA7B,CADF,eAGE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAmGE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,qBAAnB;AACS,IAAA,EAAE,EAAEtB,MAAM,CAACuB,IADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOnB,KAAK,CAACoB,UAAb,CAFF,CAnGF,CANN,CADF,CADF,CADF;AAuHD,CAvKD;;AAyKA,eAAetB,MAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { NavLink, useHistory, useRouteMatch } from \"react-router-dom\";\n\nimport Moment from 'react-moment';\n\nimport API from '../../api/api';\nimport { MultiLangContext } from \"../../context/MultiLang/MultiLang\";\nimport { ROUTES } from \"../../config/constants\";\n\nimport { IMatchParams, ITransaction, ITransactionOutputs } from \"../../interfaces/interfaces\";\n\nimport Spinner from '../../components/Spinner';\nimport AmountFormat from \"../../components/AmountFormat/AmountFormat\";\nimport CopyItem from \"../../components/CopyItem/CopyItem\";\nimport './TxPage.scss';\n\n\nconst TxPage = () => {\n  const history = useHistory();\n  const {words, selectedLang} = useContext(MultiLangContext);\n\n  const match = useRouteMatch<IMatchParams>('/tx/:id');\n  const [loading, setLoading] = useState(false);\n  // const [txState, setTxState] = useState<{\n  //   block: number;\n  //   from: string;\n  //   hash: string;\n  //   pending: boolean;\n  //   rejected: boolean;\n  //   timestamp: number;\n  //   status: string;\n  //   outputs: any;\n  // }>({\n  //   block: 0,\n  //   from: '',\n  //   hash:  '',\n  //   pending: false,\n  //   rejected: false,\n  //   timestamp: 0,\n  //   status: '',\n  //   outputs: Array<ITransaction>\n  // });\n\n  const [txState, setTxState] = React.useState<ITransaction | null>();\n\n\n  useEffect(() => {\n    setLoading(false);\n\n    API.getTransaction(match?.params.id)\n      .then(res => {\n        console.log(res.data)\n\n        setTxState(res.data);\n        setLoading(true);\n      })\n      .catch(err => {\n        console.log(err)\n\n        history.push('/not-found')\n      });\n    // eslint-disable-next-line\n  }, [match?.params.id]);\n\n\n  return (\n    <>\n      <section className=\"section details\">\n        <div className=\"container\">\n          {!loading\n            ? (\n              <Spinner/>\n            )\n            : (\n              <>\n                <h2 className=\"title\">{words.txDetails}</h2>\n\n                <div className=\"details__block\">\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.txnHash}:</h6>*/}\n\n                  {/*  <div className=\"copy__block\">*/}\n                  {/*    <span className='text break-all copy__text'>{txState.hash}</span>*/}\n\n                  {/*    <CopyItem*/}\n                  {/*      name={words.hash}*/}\n                  {/*      value={txState.hash}*/}\n                  {/*    />*/}\n                  {/*  </div>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.status}:</h6>*/}\n\n                  {/*  <div>*/}\n                  {/*    <span className={`status status--${txState.status}`}>*/}\n                  {/*      {(words.statusTx as any)[txState.status]}*/}\n                  {/*    </span>*/}\n                  {/*  </div>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.block}:</h6>*/}\n\n                  {/*  <NavLink className='link'*/}\n                  {/*           to={ROUTES.setBlockRoute(txState.block)}>*/}\n                  {/*    {txState.block}*/}\n                  {/*  </NavLink>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.timestamp}:</h6>*/}\n\n                  {/*  <span className=\"text\">*/}\n                  {/*    <Moment date={txState.timestamp}*/}\n                  {/*            utc*/}\n                  {/*            locale={selectedLang}*/}\n                  {/*            fromNow*/}\n                  {/*    />*/}\n\n                  {/*    <Moment date={txState.timestamp}*/}\n                  {/*            utc*/}\n                  {/*            locale={selectedLang}*/}\n                  {/*            format=\" (MMMM-DD-YYYY HH:mm:ss +UTC)\"*/}\n                  {/*    />*/}\n                  {/*  </span>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.from}:</h6>*/}\n\n                  {/*  <NavLink className='link'*/}\n                  {/*           to={ROUTES.setAddressRoute(txState.outputs[0].to)}>*/}\n                  {/*    {txState.outputs[0].to}*/}\n                  {/*  </NavLink>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.to}:</h6>*/}\n\n                  {/*  <NavLink className='link'*/}\n                  {/*           to={ROUTES.setAddressRoute(txState.outputs[1].to)}>*/}\n                  {/*    {txState.outputs[1].to}*/}\n                  {/*  </NavLink>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.fee}:</h6>*/}\n\n                  {/*  <span className=\"text\">*/}\n                  {/*    {(txState.outputs[2].amount).toLocaleString('en-EN')} SNT*/}\n                  {/*  </span>*/}\n                  {/*</div>*/}\n\n                  {/*<div className=\"detail vertical-center\">*/}\n                  {/*  <h6 className=\"detail__name\">{words.value}:</h6>*/}\n\n                  {/*  <span className=\"amount\">*/}\n                  {/*    <AmountFormat*/}\n                  {/*      type='snt'*/}\n                  {/*      amount={txState.outputs[1].amount}*/}\n                  {/*    /> SNT*/}\n\n                  {/*    <span className='amount--dollar'>*/}\n                  {/*      <AmountFormat*/}\n                  {/*        type='usd'*/}\n                  {/*        amount={txState.outputs[1].amount}*/}\n                  {/*      />*/}\n                  {/*    </span>*/}\n                  {/*  </span>*/}\n                  {/*</div>*/}\n                </div>\n\n                <NavLink className='button button--home'\n                         to={ROUTES.main}>\n                  <span>{words.backToMain}</span>\n                </NavLink>\n              </>\n            )\n          }\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default TxPage;"]},"metadata":{},"sourceType":"module"}