{"ast":null,"code":"import _slicedToArray from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nvar AmountFormat = function AmountFormat(props) {\n  var data = props.data,\n      type = props.type,\n      amount = props.amount;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  useEffect(function () {\n    if (!isNaN(data.price)) {\n      setLoading(true);\n    }\n  }, [data.price]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, type === 'snt' && /*#__PURE__*/React.createElement(React.Fragment, null, amount.toLocaleString('en-EN', {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 4\n  })), type === 'usd' && (!loading ? /*#__PURE__*/React.createElement(React.Fragment, null, \"($0)\") : /*#__PURE__*/React.createElement(React.Fragment, null, \"($\", (amount * Number(data.price)).toLocaleString('en-EN', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }), \")\")));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    data: state.data.list\n  };\n};\n\nexport default connect(mapStateToProps)(AmountFormat);","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/components/AmountFormat/AmountFormat.tsx"],"names":["React","useEffect","useState","connect","AmountFormat","props","data","type","amount","loading","setLoading","isNaN","price","toLocaleString","minimumFractionDigits","maximumFractionDigits","Number","mapStateToProps","state","list"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAYA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA+B;AAAA,MAC1CC,IAD0C,GACnBD,KADmB,CAC1CC,IAD0C;AAAA,MACpCC,IADoC,GACnBF,KADmB,CACpCE,IADoC;AAAA,MAC9BC,MAD8B,GACnBH,KADmB,CAC9BG,MAD8B;;AAAA,kBAGpBN,QAAQ,CAAC,KAAD,CAHY;AAAA;AAAA,MAG3CO,OAH2C;AAAA,MAGlCC,UAHkC;;AAKlDT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACU,KAAK,CAACL,IAAI,CAACM,KAAN,CAAV,EAAwB;AACtBF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACJ,IAAI,CAACM,KAAN,CAJM,CAAT;AAMA,sBACE,0CACGL,IAAI,KAAK,KAAT,iBACC,0CACGC,MAAM,CAACK,cAAP,CAAsB,OAAtB,EAA+B;AAC9BC,IAAAA,qBAAqB,EAAE,CADO;AAE9BC,IAAAA,qBAAqB,EAAE;AAFO,GAA/B,CADH,CAFJ,EAUGR,IAAI,KAAK,KAAT,KACE,CAACE,OAAD,gBACC,iDADD,gBAGC,gDAEG,CAACD,MAAM,GAAGQ,MAAM,CAACV,IAAI,CAACM,KAAN,CAAhB,EAA8BC,cAA9B,CAA6C,OAA7C,EAAsD;AACrDC,IAAAA,qBAAqB,EAAE,CAD8B;AAErDC,IAAAA,qBAAqB,EAAE;AAF8B,GAAtD,CAFH,MAJH,CAVH,CADF;AA0BD,CArCD;;AAuCA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAsB;AAC5CZ,IAAAA,IAAI,EAAEY,KAAK,CAACZ,IAAN,CAAWa;AAD2B,GAAtB;AAAA,CAAxB;;AAIA,eAAehB,OAAO,CAACc,eAAD,CAAP,CAAyBb,YAAzB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { AppState } from '../../store';\n\nimport { IInfo } from '../../interfaces/interfaces';\n\ninterface IAmountFormatProps {\n  data: IInfo;\n  type: 'usd' | 'snt';\n  amount: number;\n}\n\nconst AmountFormat = (props: IAmountFormatProps) => {\n  const { data, type, amount } = props;\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (!isNaN(data.price)) {\n      setLoading(true);\n    }\n  }, [data.price]);\n\n  return (\n    <>\n      {type === 'snt' && (\n        <>\n          {amount.toLocaleString('en-EN', {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 4,\n          })}\n        </>\n      )}\n\n      {type === 'usd' &&\n        (!loading ? (\n          <>($0)</>\n        ) : (\n          <>\n            ($\n            {(amount * Number(data.price)).toLocaleString('en-EN', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })}\n            )\n          </>\n        ))}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  data: state.data.list,\n});\n\nexport default connect(mapStateToProps)(AmountFormat);\n"]},"metadata":{},"sourceType":"module"}