{"ast":null,"code":"import _objectSpread from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport API from '../api/api';\nexport var GET_INFO = 'GET_INFO';\nexport var getInfo = function getInfo(list) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_INFO,\n      list: list\n    });\n  };\n};\nexport var updateUserInfo = function updateUserInfo() {\n  return function (dispatch) {\n    API.getInfo().then(function (res) {\n      dispatch({\n        type: GET_INFO,\n        list: res.data\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\nvar initialState = {\n  list: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_INFO:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          list: action.list\n        });\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/ducks/info.ts"],"names":["API","GET_INFO","getInfo","list","dispatch","type","updateUserInfo","then","res","data","catch","err","console","log","initialState","state","action"],"mappings":";AACA,OAAOA,GAAP,MAAgB,YAAhB;AAKA,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AAEP,OAAO,IAAMC,OAAO,GAClB,SADWA,OACX,CAACC,IAAD;AAAA,SACA,UAACC,QAAD,EAA8B;AAC5BA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,QADC;AAEPE,MAAAA,IAAI,EAAEA;AAFC,KAAD,CAAR;AAID,GAND;AAAA,CADK;AASP,OAAO,IAAMG,cAAc,GACzB,SADWA,cACX;AAAA,SACA,UAACF,QAAD,EAA8B;AAC5BJ,IAAAA,GAAG,CAACE,OAAJ,GACGK,IADH,CACQ,UAACC,GAAD,EAAc;AAClBJ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,QADC;AAEPE,QAAAA,IAAI,EAAEK,GAAG,CAACC;AAFH,OAAD,CAAR;AAID,KANH,EAOGC,KAPH,CAOS,UAACC,GAAD,EAAc;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KATH;AAUD,GAZD;AAAA,CADK;AAeP,IAAMG,YAAwB,GAAG;AAC/BX,EAAAA,IAAI,EAAE;AADyB,CAAjC;AAIA,gBAAe,YAA2C;AAAA,MAA1CY,KAA0C,uEAAlCD,YAAkC;AAAA,MAApBE,MAAoB;;AACxD,UAAQA,MAAM,CAACX,IAAf;AACE,SAAKJ,QAAL;AAAe;AACb,+CACKc,KADL;AAEEZ,UAAAA,IAAI,EAAEa,MAAM,CAACb;AAFf;AAID;;AAED;AACE,aAAOY,KAAP;AATJ;AAWD,CAZD","sourcesContent":["import { Dispatch } from 'redux';\nimport API from '../api/api';\n\nimport { IInfo } from '../interfaces/interfaces';\nimport { IInfoState, IAction } from './ducks.types';\n\nexport const GET_INFO = 'GET_INFO';\n\nexport const getInfo =\n  (list: IInfo) =>\n  (dispatch: Dispatch): void => {\n    dispatch({\n      type: GET_INFO,\n      list: list,\n    });\n  };\n\nexport const updateUserInfo =\n  () =>\n  (dispatch: Dispatch): void => {\n    API.getInfo()\n      .then((res: any) => {\n        dispatch({\n          type: GET_INFO,\n          list: res.data,\n        });\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  };\n\nconst initialState: IInfoState = {\n  list: {} as IInfo,\n};\n\nexport default (state = initialState, action: IAction) => {\n  switch (action.type) {\n    case GET_INFO: {\n      return {\n        ...state,\n        list: action.list as IInfo,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}