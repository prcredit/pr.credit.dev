{"ast":null,"code":"import _slicedToArray from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/src/context/MultiLang/MultiLang.tsx\";\n\nimport React, { createContext, useState, useCallback } from 'react';\nimport ru from './words/ru';\nimport en from './words/en';\nvar words = {\n  ru: ru,\n  en: en\n};\n\nvar defaultLang = function () {\n  var lsLang = localStorage.getItem('lang');\n\n  if (!!lsLang) {\n    return lsLang;\n  }\n\n  switch (navigator.language) {\n    case 'en-US':\n      return 'en';\n\n    case 'ru-RU':\n      return 'ru';\n\n    default:\n      return !!navigator.language && !!words[navigator.language] ? navigator.language : 'en';\n  }\n\n  ;\n}();\n\nvar MultiLangContext = createContext({\n  words: words[defaultLang],\n  changeLang: function changeLang(lang, isUpdateLocale) {},\n  selectedLang: ''\n});\nMultiLangContext.displayName = 'MultiLangContext';\n\nvar MultiLangProvider = function MultiLangProvider(props) {\n  var _useState = useState({\n    selectedLang: defaultLang,\n    words: words[defaultLang]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var changeLang = useCallback(function (lang, isUpdateLocale) {\n    var newWords = words[lang];\n    setState(function (prevState) {\n      if (prevState.selectedLang === lang || !newWords) {\n        return prevState;\n      }\n\n      localStorage.setItem('lang', lang);\n      return {\n        selectedLang: lang,\n        words: newWords\n      };\n    });\n  }, []);\n  var value = {\n    words: state.words,\n    selectedLang: state.selectedLang,\n    changeLang: changeLang\n  };\n  return /*#__PURE__*/React.createElement(MultiLangContext.Provider, Object.assign({}, props, {\n    value: value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport { MultiLangContext, MultiLangProvider };","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/context/MultiLang/MultiLang.tsx"],"names":["React","createContext","useState","useCallback","ru","en","words","defaultLang","lsLang","localStorage","getItem","navigator","language","MultiLangContext","changeLang","lang","isUpdateLocale","selectedLang","displayName","MultiLangProvider","props","state","setState","newWords","prevState","setItem","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,WAAzC,QAA4D,OAA5D;AAEA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,EAAP,MAAe,YAAf;AAWA,IAAMC,KAAyB,GAAG;AAChCF,EAAAA,EAAE,EAAFA,EADgC;AAEhCC,EAAAA,EAAE,EAAFA;AAFgC,CAAlC;;AAIA,IAAME,WAAmB,GAAI,YAAc;AACzC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAf;;AAEA,MAAI,CAAC,CAACF,MAAN,EAAc;AACZ,WAAOA,MAAP;AACD;;AAED,UAAQG,SAAS,CAACC,QAAlB;AACE,SAAK,OAAL;AACE,aAAO,IAAP;;AACF,SAAK,OAAL;AACE,aAAO,IAAP;;AACF;AACE,aAAO,CAAC,CAACD,SAAS,CAACC,QAAZ,IAAwB,CAAC,CAACN,KAAK,CAACK,SAAS,CAACC,QAAX,CAA/B,GACHD,SAAS,CAACC,QADP,GAEH,IAFJ;AANJ;;AASC;AACF,CAjB2B,EAA5B;;AAmBA,IAAMC,gBAAgB,GAAGZ,aAAa,CAAkB;AACtDK,EAAAA,KAAK,EAAEA,KAAK,CAACC,WAAD,CAD0C;AAEtDO,EAAAA,UAAU,EAAE,oBAACC,IAAD,EAAeC,cAAf,EAA4C,CAAG,CAFL;AAGtDC,EAAAA,YAAY,EAAE;AAHwC,CAAlB,CAAtC;AAMAJ,gBAAgB,CAACK,WAAjB,GAA+B,kBAA/B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAgB;AAAA,kBACdlB,QAAQ,CAAC;AACjCe,IAAAA,YAAY,EAAEV,WADmB;AAEjCD,IAAAA,KAAK,EAAEA,KAAK,CAACC,WAAD;AAFqB,GAAD,CADM;AAAA;AAAA,MACjCc,KADiC;AAAA,MAC1BC,QAD0B;;AAMxC,MAAMR,UAAU,GAAGX,WAAW,CAAC,UAACY,IAAD,EAAeC,cAAf,EAA4C;AACzE,QAAMO,QAAQ,GAAGjB,KAAK,CAACS,IAAD,CAAtB;AAEAO,IAAAA,QAAQ,CAAC,UAAAE,SAAS,EAAI;AACpB,UAAIA,SAAS,CAACP,YAAV,KAA2BF,IAA3B,IAAmC,CAACQ,QAAxC,EAAkD;AAChD,eAAOC,SAAP;AACD;;AACDf,MAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA6BV,IAA7B;AAEA,aAAO;AACLE,QAAAA,YAAY,EAAEF,IADT;AAELT,QAAAA,KAAK,EAAEiB;AAFF,OAAP;AAID,KAVO,CAAR;AAWD,GAd6B,EAc3B,EAd2B,CAA9B;AAgBA,MAAMG,KAAsB,GAAG;AAC7BpB,IAAAA,KAAK,EAAEe,KAAK,CAACf,KADgB;AAE7BW,IAAAA,YAAY,EAAEI,KAAK,CAACJ,YAFS;AAG7BH,IAAAA,UAAU,EAAVA;AAH6B,GAA/B;AAMA,sBAAO,oBAAC,gBAAD,CAAkB,QAAlB,oBACDM,KADC;AAEL,IAAA,KAAK,EAAEM,KAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAID,CAhCD;;AAkCA,SAASb,gBAAT,EAA2BM,iBAA3B","sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\n\nimport ru from './words/ru';\nimport en from './words/en';\n\nimport {\n  IAllLanguagesWords,\n  IMultiLangState,\n} from './MultiLang.types';\n\n\nexport type IMultiLangWords = ReturnType<() => typeof en>;\n\n\nconst words: IAllLanguagesWords = {\n  ru,\n  en,\n}\nconst defaultLang: string = ((): string => {\n  const lsLang = localStorage.getItem('lang');\n\n  if (!!lsLang) {\n    return lsLang;\n  }\n\n  switch (navigator.language) {\n    case 'en-US':\n      return 'en';\n    case 'ru-RU':\n      return 'ru';\n    default:\n      return !!navigator.language && !!words[navigator.language]\n        ? navigator.language\n        : 'en';\n  };\n})();\n\nconst MultiLangContext = createContext<IMultiLangState>({\n  words: words[defaultLang],\n  changeLang: (lang: string, isUpdateLocale?: boolean) => { },\n  selectedLang: '',\n});\n\nMultiLangContext.displayName = 'MultiLangContext';\n\nconst MultiLangProvider = (props: any) => {\n  const [state, setState] = useState({\n    selectedLang: defaultLang,\n    words: words[defaultLang],\n  });\n\n  const changeLang = useCallback((lang: string, isUpdateLocale?: boolean) => {\n    const newWords = words[lang];\n\n    setState(prevState => {\n      if (prevState.selectedLang === lang || !newWords) {\n        return prevState;\n      }\n      localStorage.setItem('lang', lang);\n\n      return {\n        selectedLang: lang,\n        words: newWords,\n      }\n    });\n  }, []);\n\n  const value: IMultiLangState = {\n    words: state.words,\n    selectedLang: state.selectedLang,\n    changeLang,\n  }\n\n  return <MultiLangContext.Provider\n    {...props}\n    value={value}\n  />\n}\n\nexport { MultiLangContext, MultiLangProvider };"]},"metadata":{},"sourceType":"module"}