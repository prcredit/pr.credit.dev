{"ast":null,"code":"import _slicedToArray from \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/vetal-home-work/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/apps/sincere/explorer-front/src/components/CopyItem/CopyItem.tsx\";\n\nimport React, { useState, useContext } from 'react';\nimport { MultiLangContext } from \"../../context/MultiLang/MultiLang\";\nimport { classModifier, copyToClipboard } from '../../utils';\nimport './CopyItem.scss';\n\nvar CopyItem = function CopyItem(props) {\n  var name = props.name,\n      value = props.value;\n\n  var _useContext = useContext(MultiLangContext),\n      words = _useContext.words;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isShown = _useState2[0],\n      setIsShown = _useState2[1];\n\n  var onCopy = function onCopy() {\n    copyToClipboard(value);\n    setIsShown(true);\n    setTimeout(function () {\n      setIsShown(false);\n    }, 3000);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classModifier('copy__icon', [isShown && 'done']),\n    onClick: function onClick() {\n      return onCopy();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classModifier('copy-tooltip', [isShown && 'done']),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text copy-tooltip__text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, !isShown ? /*#__PURE__*/React.createElement(React.Fragment, null, words.copy, \" \", name, \" \", words.toClipboard) : /*#__PURE__*/React.createElement(React.Fragment, null, words.copied))));\n};\n\nexport default CopyItem;","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/components/CopyItem/CopyItem.tsx"],"names":["React","useState","useContext","MultiLangContext","classModifier","copyToClipboard","CopyItem","props","name","value","words","isShown","setIsShown","onCopy","setTimeout","copy","toClipboard","copied"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AAEA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,SAAQC,aAAR,EAAuBC,eAAvB,QAA6C,aAA7C;AAIA,OAAO,iBAAP;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAA2B;AAAA,MAExCC,IAFwC,GAItCD,KAJsC,CAExCC,IAFwC;AAAA,MAGxCC,KAHwC,GAItCF,KAJsC,CAGxCE,KAHwC;;AAAA,oBAM1BP,UAAU,CAACC,gBAAD,CANgB;AAAA,MAMnCO,KANmC,eAMnCA,KANmC;;AAAA,kBAOZT,QAAQ,CAAC,KAAD,CAPI;AAAA;AAAA,MAOnCU,OAPmC;AAAA,MAO1BC,UAP0B;;AAU1C,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBR,IAAAA,eAAe,CAACI,KAAD,CAAf;AAEAG,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAE,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GARD;;AAWA,sBACE,uDACE;AAAK,IAAA,SAAS,EAAER,aAAa,CAAC,YAAD,EAC3B,CACEO,OAAO,IAAI,MADb,CAD2B,CAA7B;AAKK,IAAA,OAAO,EAAE;AAAA,aAAME,MAAM,EAAZ;AAAA,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAK,IAAA,SAAS,EAAET,aAAa,CAAC,cAAD,EAC3B,CACEO,OAAO,IAAI,MADb,CAD2B,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAG,IAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACA,OAAD,gBACG,0CAAGD,KAAK,CAACK,IAAT,OAAgBP,IAAhB,OAAuBE,KAAK,CAACM,WAA7B,CADH,gBAEG,0CAAGN,KAAK,CAACO,MAAT,CAJN,CANF,CAVF,CADF;AA2BD,CAhDD;;AAkDA,eAAeX,QAAf","sourcesContent":["import React, {useState, useContext} from 'react';\n\nimport {MultiLangContext} from \"../../context/MultiLang/MultiLang\";\nimport {classModifier, copyToClipboard} from '../../utils';\n\nimport { ICopyItemProps } from \"./CopyItem.types\";\n\nimport './CopyItem.scss';\n\n\nconst CopyItem = (props: ICopyItemProps) => {\n  const {\n    name,\n    value,\n  } = props;\n\n  const {words} = useContext(MultiLangContext);\n  const [isShown, setIsShown] = useState(false);\n\n\n  const onCopy = () => {\n    copyToClipboard(value);\n\n    setIsShown(true);\n\n    setTimeout(() => {\n      setIsShown(false);\n    }, 3000)\n  };\n\n\n  return (\n    <>\n      <div className={classModifier('copy__icon',\n        [\n          isShown && 'done'\n        ],\n      )}\n           onClick={() => onCopy()}\n      >\n      </div>\n\n      <div className={classModifier('copy-tooltip',\n        [\n          isShown && 'done'\n        ],\n      )}\n      >\n        <p className=\"text copy-tooltip__text\">\n          {/*<span className='text--700'></span>*/}\n          {!isShown\n            ? <>{words.copy} {name} {words.toClipboard}</>\n            : <>{words.copied}</>\n          }\n        </p>\n      </div>\n    </>\n  )\n};\n\nexport default CopyItem;"]},"metadata":{},"sourceType":"module"}