{"ast":null,"code":"import axios from'axios';var host=window.location.hostname;var prodHosts=['explorer.sn-token.io'];var releaseHosts=['explorer-release.devr.app'];export var ENV=function(){if(releaseHosts.includes(host)){return'RELEASE';}return prodHosts.includes(host)?'PROD':'DEV';}();var baseURL={PROD:{api:'https://snode-api.sn-token.io'},RELEASE:{api:'https://snode-release.devr.app'},DEV:{api:'https://snode.devr.app'// api: 'https://snode-api.sn-token.io', // for test prod api\n}};axios.defaults.baseURL=baseURL[ENV].api;axios.interceptors.response.use(function(response){// Do something with response data\nreturn Promise.resolve(response);},function(error){// Do something with response error\nreturn Promise.reject(error);});","map":{"version":3,"sources":["/home/vetal-home-work/Документы/apps/sincere/explorer-front/src/config/api-config.ts"],"names":["axios","host","window","location","hostname","prodHosts","releaseHosts","ENV","includes","baseURL","PROD","api","RELEASE","DEV","defaults","interceptors","response","use","Promise","resolve","error","reject"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAIA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,QAAP,CAAgBC,QAA7B,CACA,GAAMC,CAAAA,SAAS,CAAG,CAAC,sBAAD,CAAlB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAAC,2BAAD,CAArB,CAEA,MAAO,IAAMC,CAAAA,GAAQ,CAAI,UAAM,CAC7B,GAAID,YAAY,CAACE,QAAb,CAAsBP,IAAtB,CAAJ,CAAiC,CAC/B,MAAO,SAAP,CACD,CACD,MAAOI,CAAAA,SAAS,CAACG,QAAV,CAAmBP,IAAnB,EACH,MADG,CAEH,KAFJ,CAGD,CAPuB,EAAjB,CASP,GAAMQ,CAAAA,OAAO,CAAG,CACdC,IAAI,CAAE,CACJC,GAAG,CAAE,+BADD,CADQ,CAIdC,OAAO,CAAE,CACPD,GAAG,CAAE,gCADE,CAJK,CAOdE,GAAG,CAAE,CACHF,GAAG,CAAE,wBACL;AAFG,CAPS,CAAhB,CAaAX,KAAK,CAACc,QAAN,CAAeL,OAAf,CAAyBA,OAAO,CAACF,GAAD,CAAP,CAAaI,GAAtC,CAEAX,KAAK,CAACe,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACE,SAAAD,QAAQ,CAAI,CAAE;AACZ,MAAOE,CAAAA,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP,CACD,CAHH,CAIE,SAAAI,KAAK,CAAI,CAAE;AACT,MAAOF,CAAAA,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP,CACD,CANH","sourcesContent":["import axios from 'axios';\n\nimport { Env } from '../interfaces/interfaces';\n\nconst host = window.location.hostname;\nconst prodHosts = ['explorer.sn-token.io'];\nconst releaseHosts = ['explorer-release.devr.app'];\n\nexport const ENV: Env = (() => {\n  if (releaseHosts.includes(host)) {\n    return 'RELEASE';\n  }\n  return prodHosts.includes(host)\n    ? 'PROD'\n    : 'DEV';\n})();\n\nconst baseURL = {\n  PROD: {\n    api: 'https://snode-api.sn-token.io',\n  },\n  RELEASE: {\n    api: 'https://snode-release.devr.app',\n  },\n  DEV: {\n    api: 'https://snode.devr.app',\n    // api: 'https://snode-api.sn-token.io', // for test prod api\n  },\n}\n\naxios.defaults.baseURL = baseURL[ENV].api;\n\naxios.interceptors.response.use(\n  response => { // Do something with response data\n    return Promise.resolve(response);\n  },\n  error => { // Do something with response error\n    return Promise.reject(error);\n  });\n"]},"metadata":{},"sourceType":"module"}